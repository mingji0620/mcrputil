on:
  push:
    tags:
      - '*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Check for existing release
        id: check-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            return releases.some(r => r.tag_name === process.env.GITHUB_REF_NAME);
          result-encoding: string

      - name: Create Release
        if: steps.check-release.outputs.result != 'true'
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          skip_if_duplicate: true
  build_release:
    needs: [ create_release ]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: mcrputil
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            artifact_name: mcrputil.exe
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            artifact_name: mcrputil
            target: x86_64-apple-darwin
          - os: ubuntu-20.04
            artifact_name: mcrputil
            target: x86_64-unknown-linux-musl
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            **/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: target/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream
